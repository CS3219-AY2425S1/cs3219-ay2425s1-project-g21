services:

  frontend-service:
    build: ./frontend-service
    ports:
      - 3000:3000
    depends_on:
      - question-service
      - user-service
    volumes:
      - ./frontend-service:/app
      - /app/node_modules

  question-service:
    build: ./question-service
    ports:
      - 8080:8080
    depends_on:
      - question-db
    volumes:
      - ./question-service:/app
      - /app/node_modules

  user-service:
    build: ./user-service
    ports:
      - 3001:3001
    depends_on:
      - user-db
    volumes:
      - ./user-service:/app
      - /app/node_modules
  
  collaboration-service:
    build: ./collaboration-service
    ports:
      - 5001:5001
    volumes:
      - ./collaboration-service:/app
      - /app/node_modules

  user-db:
    image: mongo:latest
    container_name: user-db
    volumes:
      - ./db-init/init-user-db.js:/docker-entrypoint-initdb.d/init-user-db.js
      - user-db-data:/data/db
    ports:
      - 27017:27017

  question-db:
    image: mongo:latest
    container_name: question-db
    volumes:
      - ./db-init/init-question-db.js:/docker-entrypoint-initdb.d/init-question-db.js
      - question-db-data:/data/db
    ports:
      - 27018:27017

  request-service:
    build: ./matching-service/request-service
    ports:
      - 3002:3002
    depends_on:
      - user-service
      # - question-service # maybe to retrieve information on the questions difficulties/topics
    volumes:
      - ./matching-service/request-service:/app
      - /app/node_modules

  matcher-service:
    build: ./matching-service/matcher-service
    ports:
      - 3003:3003
    depends_on:
      - user-service
      # - question-service # maybe to retrieve information on the questions difficulties/topics
    volumes:
      - ./matching-service/matcher-service:/app
      - /app/node_modules

  dequeue-service:
    build: ./matching-service/dequeue-service
    ports:
      - 3004:3004
    # depends_on:
      # - user-service
      # - question-service # maybe to retrieve information on the questions difficulties/topics
    volumes:
      - ./matching-service/dequeue-service:/app
      - /app/node_modules

  room-service:
    build: ./matching-service/room-service
    ports:
      - 3005:3005
    depends_on:
      - user-service
      - collaboration-service # add after dockerising collaboration-service
    volumes:
      - ./matching-service/room-service:/app
      - /app/node_modules

  kafka:
    image: bitnami/kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true

  kafka-setup:
    image: node:22-alpine
    volumes:
      - ./db-init:/scripts
      # TODO: Prevent syncing of node stuff.
    working_dir: /scripts
    command: sh -c "npm install kafkajs && node init-kafka.js"
    depends_on:
      - kafka


volumes:
  user-db-data:
    name: user-db-data
  question-db-data:
    name: question-db-data


# Notes:
#
# Docker Compose will automatically create an internal network where services can resolve each other using their service names.
#
# For example, inside your frontend-service code, you can make requests to the question-service like this:
# - const questionServiceURL = "http://question-service:3001/api/questions";  # Hostname is the service name
